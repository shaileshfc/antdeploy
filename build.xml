<project basedir="." default="package" name="NDP Deployment Build">

	<scriptdef language="javascript" name="lower">
	    <attribute name="string" /> 
	    <attribute name="to" />
	    project.setProperty(attributes.get("to"), attributes.get("string").toLowerCase());
	</scriptdef>

    <scriptdef language="javascript" name="findreplace">
        <attribute name="string" />
        <attribute name="old" />
        <attribute name="new" />
        <attribute name="to" />
        var s = new String(attributes.get("string"));
        project.setProperty(attributes.get("to"), s.replace(new RegExp(attributes.get("old"), 'g'), attributes.get("new")));
    </scriptdef>

    <scriptdef language="javascript" name="splitcontext">
        <attribute name="context"/>
        var s = new String(attributes.get("context"));
        var res = s.split("_");
        project.setProperty("environment", res[0]);
        project.setProperty("region", res[1]);
    </scriptdef>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="../ant-contrib-0.6.jar"/>
        </classpath>
    </taskdef>


    <property name="build.dir" location="build"/>
    <property name="deploy.dir" location="deploy"/>
    <property name="config.dir" location="config"/>
    <property name="job.dir" location="jobs"/>
    <property name="lib.dir" location="lib"/>
    <property name="rules.dir" location="rules"/>
    <property name="context" value="DEV_EMEA"/>
    <property name="docker.registry" value="ngrpdev.azurecr.io"/>
    <property name="docker.repository" value="${docker.registry}/fcm-ngrp"/>
    <property name="job.name" value="route_financial_data_controller"/>
    <property name="version.major" value="0"/>
    <property name="version.minor" value="70"/>
    <property name="memory.xmx" value="2g"/>
    <property name="log.level" value="info"/>
    <property name="log.output" value="LOG_FILE"/>
    <property name="os" value="windows"/>
    <property name="env" value="TEST"/>

    <findreplace string="${job.name}" old="_" new="-" to="docker.name"/>
    <lower string="${context}" to="context.lower"/>
    <findreplace string="${context.lower}" old="_" new="-" to="docker.context"/>
    <splitcontext context="${context}"/>

    <path id="project.web.classpath">
        <fileset dir="${build.dir}">
            <include name="**/*/${context}.properties" />
        </fileset>	
    </path>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${deploy.dir}"/>
    </target>


    <target name="build">
        <unzip src="${job.dir}/${job.name}_${version.major}.${version.minor}.zip" dest="${build.dir}"/>
        <mkdir dir="${build.dir}/jar"/>
        <unjar src="${build.dir}/${job.name}/${job.name}_${version.major}_${version.minor}.jar" dest="${build.dir}/jar"/>
        
        <if>
            <equals arg1="${os}" arg2="windows"/>
            <then>
                <pathconvert property="classpathInName" refid="project.web.classpath" />
                <for list="${classpathInName}" param="location" delimiter=";">
                    <sequential>
                        <propertyregex property="file.loc" input="@{location}" regexp="([^\.]*\\)[^\.]*(\.properties)" replace="\1Default\2" casesensitive="false" override="true"/>
                        <move file="@{location}" tofile="${file.loc}"/>
                    </sequential>
                </for>
            </then>
            <else>
                <move todir="${build.dir}/${job.name}" verbose="true" force="true" overwrite="true">
                    <fileset dir="${build.dir}/${job.name}">
                        <include name="**/*"/>
                    </fileset>
                    <mapper type="glob" from="*/${context}.properties" to="*/Default.properties"/>
                    <!--regexpmapper from="DEV_EMEA.proprerties" to="Default.properties"/-->
                    <!--globmapper from="${context}.properties" to="Default.properties"/-->
                    <!--regexpmapper from="${context}.properties" to="\1/Default.properties"/-->
                </move>
                <move todir="${build.dir}/jar" verbose="true" force="true" overwrite="true">
                    <fileset dir="${build.dir}/jar">
                        <include name="**/*"/>
                    </fileset>
                    <mapper type="glob" from="*/${context}.properties" to="*/Default.properties"/>
                    <!--regexpmapper from="DEV_EMEA.proprerties" to="Default.properties"/-->
                    <!--globmapper from="${context}.properties" to="Default.properties"/-->
                    <!--regexpmapper from="${context}.properties" to="\1/Default.properties"/-->
                </move>
            </else>
        </if>

        <copy todir="${build.dir}/${job.name}/config" overwrite="true">
            <file file="${build.dir}/${job.name}/config/contexts/Default.properties"/>
             <globmapper from="*" to="application.properties"/>
        </copy>

        <copy todir="${build.dir}/jar/config" overwrite="true">
            <file file="${config.dir}/log4j.xml"/>
            <file file="${config.dir}/log4j2.xml"/>
            <filterset>
                <filter token="loglevel" value="${log.level}"/>
                <filter token="service" value="${job.name}"/>
            </filterset>
        </copy>

        <copy todir="${build.dir}/${job.name}/config" overwrite="true">
            <file file="${config.dir}/log4j.xml"/>
            <file file="${config.dir}/log4j2.xml"/>
            <filterset>
                <filter token="loglevel" value="${log.level}"/>
                <filter token="log.output" value="${log.output}"/>
                <filter token="service" value="${job.name}"/>
            </filterset>
        </copy>

         <delete>
            <fileset dir="${build.dir}/${job.name}">
                <exclude name="**/contexts/Default.properties"/>
                <include name="**/contexts/*.properties"/>
            </fileset>
            <fileset dir="${build.dir}/jar">
                <exclude name="**/contexts/Default.properties"/>
                <include name="**/contexts/*.properties"/>
            </fileset>
        </delete>

        <jar destfile="${build.dir}/${job.name}/${job.name}_${version.major}_${version.minor}.jar" filesetmanifest="merge" compress="false"> 
            <fileset dir="${build.dir}/jar"/>
        </jar>

        <delete dir="${build.dir}/jar" />

        <copy todir="${build.dir}/${job.name}" overwrite="true">
            <file file="${config.dir}/${job.name}_run.sh"/>
            <filterset>
        	<filter token="jar.file" value="${job.name}_${version.major}_${version.minor}.jar"/>
                <filter token="memory" value="${memory.xmx}"/>
            </filterset>
            <file file="${lib.dir}/AzureKeyVaultSecretService.py"/>
        </copy>
		<fixcrlf srcdir="${build.dir}/${job.name}" includes="**/*.sh" eol="lf" eof="remove"/>
    </target>

    <target depends="clean,build" name="package">
        <zip destfile="${build.dir}/${job.name}_${version.major}.${version.minor}.zip">
            <!--fileset dir="${build.dir}/${job.name}"/>
	    <fileset dir="${build.dir}/lib"/-->
            <fileset dir="${build.dir}"/>
            <file file="${build.dir}/jobinfo.properties"/>
        </zip>
    </target>

    <target depends="clean,build" name="docker">
        <copy todir="${build.dir}">
            <fileset file="${config.dir}/Dockerfile" />
            <filterset>
        		<filter token="job.name" value="${job.name}"/>
        	</filterset>
        </copy>
        <copy todir="${build.dir}">
            <fileset file="${lib.dir}/server-jre-8u144-linux-x64.tar.gz" />
        </copy>
        <copy todir="${build.dir}/rules">
            <fileset dir="${rules.dir}" />
        </copy>
        <copy todir="${build.dir}">
            <file file="${config.dir}/cacerts"/>
        </copy>

        <exec dir="${build.dir}" executable="docker">
            <arg value="build"/>
            <arg value="-t"/>
			<arg value="${docker.repository}/${docker.context}/${docker.name}:latest"/>
            <arg value="-t"/>
            <arg value="${docker.repository}/${docker.context}/${docker.name}:v${version.major}.${version.minor}"/>
            <!--arg value="-t"/>
            <arg value="${docker.repository}/${docker.name}:mem-${memory.xmx}"/-->
			<arg value="."/>
        </exec>
    </target>

    <target depends="docker" name="docker-push">
        <exec executable="docker">
            <arg value="login"/>
            <arg value="${docker.registry}"/>
        </exec>

        <exec dir="${build.dir}" executable="docker">
            <arg value="push"/>
            <arg value="${docker.repository}/${docker.context}/${docker.name}:latest"/>
        </exec>

        <exec dir="${build.dir}" executable="docker">
            <arg value="push"/>
            <arg value="${docker.repository}/${docker.context}/${docker.name}:v${version.major}.${version.minor}"/>
        </exec>
    </target>

    <target name="docker-run">
        <exec dir="${build.dir}" executable="az">
            <arg value="container"/>
            <arg value="create"/>
            <arg value="--resource-group"/>
            <arg value="dev-ngrp-emea"/>
            <arg value="--name"/>
            <arg value="${docker.name}"/>
            <arg value="--image"/>
            <arg value="${docker.repository}/${docker.context}/${docker.name}:latest"/>
            <arg value="--assign-identity"/>
            <arg value="/subscriptions/c530ca37-70ff-4eb8-b471-427f69d1c705/resourcegroups/dev-ngrp-emea/providers/Microsoft.ManagedIdentity/userAssignedIdentities/keyvaultsampleidentity"/>

            <arg value="--registry-username"/>
            <arg value="ngrpdev"/>
            <arg value="--registry-password"/>
            <arg value="2SvWoGy3mjbMCRagiPpsTg8a6dWlh+VQ"/>
            
            <arg value="--vnet"/>
            <arg value="dev-ngrp-apac"/>
            <arg value="--subnet"/>
            <arg value="Dev-Docker"/>
            <arg value="--location"/>
            <arg value="australiaeast"/>

            <arg value="--os-type"/>
            <arg value="Linux"/>
            <arg value="--ip-address"/>
            <arg value="Private"/>
        </exec>
    </target>

    <target name="aks-create" depends="clean">
        <mkdir dir="${deploy.dir}"/>
        <exec dir="${deploy.dir}" executable="az">
            <arg value="account"/>
            <arg value="set"/>
            <arg value="-s"/>
            <arg value="NGRP ${environment}"/>
        </exec>
    </target>

    <target name="docker-push-all">
        <antcall target="docker-push">
            <param name="context" value="${env}_EMEA"/>
        </antcall>
        <antcall target="docker-push">
            <param name="context" value="${env}_APAC"/>
        </antcall>
        <antcall target="docker-push">
            <param name="context" value="${env}_LATAM"/>
        </antcall>
    </target>
</project>